#!/usr/bin/python3

# Copyright (c) HPC Lab, Department of Electrical Engineering, IIT Bombay
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# ================================================================
#
# Background: The Posit Numeric Type can be parameterized using
# Width and Exponent Size. Based on these two parameters several 
# sub-field types can be computed.
#
# Further, in BSV we often want the sizes both as types and as values.
#
# Since all these sizes are inter-related, hand-written declarations can be
# error-prone.
#
# This program is given just 2 basic, independent sizes:
#    PositWidth         (Width of a posit number)
#    Exponent           (Width of exponent field)
#
# and generates declarations for all the sized elements of interest in BSV
# source code as a BSV package. Each declaration shows the actual size
# and, as a comment, the formula used, if it is derived from other
# sizes.  The basic sizes are provided on the command line.
#
# --help will remind you of the command-line arguments.
#COMMAND:::: ./Gen_Posit_Numeric_Types --posit-width 64 --exp-width 3 --float-width 32
# ================================================================

import argparse
import sys
import os
import math

# ================================================================
# Key data structure:
#     items :: [(name::string, value::int: formula::string)]
#
# ================================================================

def main (argv):
    # Parse command line arguments
    parser = argparse.ArgumentParser (
              formatter_class=argparse.RawDescriptionHelpFormatter
            , description="Generate BSV type definitions for Posit Numbers")

    parser.add_argument (
              '--pkg'
            , action="store"
            , dest='pkgName'
            , help='Name of BSV package'
            , default="Posit_Numeric_Types"
            )
    parser.add_argument(
              '--posit-width'
            , type=int
            , action="store"
            , dest='positWidth'
            , default=16
            , help="Posit number width"
            )
    parser.add_argument(
              '--exp-width'
            , type=int
            , action="store"
            , dest='expWidth'
            , default=5
            , help="Exponent field width"
            )
    parser.add_argument(
              '--float-width'
            , type=int
            , action="store"
            , dest='floatWidth'
            , default=32
            , help="Floating point number width"
            )

    args = parser.parse_args()
    print(args)
    items = [ ("PositWidth",        args.positWidth,    "(basic)"),
              ("ExpWidth",          args.expWidth,      "(basic)"),
			  ("FloatWidth",        args.floatWidth,    "(basic)")]
    if args.floatWidth == 32:
        items.append (("FloatExpWidth", 8, "Exponent width of single precision float"))
        items.append (("FloatFracWidth", 23, "Fraction width of single precision float"))
        items.append (("FloatBias", 127, "Bais for single precision float"))
    elif args.floatWidth == 64:	
        items.append (("FloatExpWidth", 11, "Exponent width of double precision float"))
        items.append (("FloatFracWidth", 52, "Fraction width of double precision float"))
        items.append (("FloatBias", 1023, "Bais for double precision float"))
    print_items (items)

    items = compute_derived_values (items)

    # ---- Generate BSV source file
    generate_BSV_file (args.pkgName, items)

    return 0

# ================================================================
# Print 'items'

def print_items (items):
    for (attr, val, formula) in items:
        print ("    {0:20s}= {1:4}    {2}".format ((attr + ":"), val, formula))

# ================================================================
# Select value associated with name from items

def sel (items, name):
    for (attr, val, formula) in items:
        if (attr == name):
            return val
    print ("Error: no attr {0} in items".format (name))
    sys.exit (1)

def sel2 (items, name):
    for (attr, val, formula) in items:
        if (attr == name):
            return (val, formula)
    print ("Error: no attr {0} in items".format (name))
    sys.exit (1)

# ================================================================
# Compute derived values

def compute_derived_values (items):
    items.append (("PositWidthMinus1",
                   sel (items, "PositWidth") - 1,
                   "PositWidth - 1"))

    items.append (("PositWidthMinus3",
                   sel (items, "PositWidth") - 3,
                   "PositWidth - 3"))

    items.append (("MaxExpValue",
                   2 ** sel (items, "ExpWidth"),
                   "2 ^ ExpWidth"))

    items.append (("FracWidth",
                   sel (items, "PositWidthMinus3") - sel (items, "ExpWidth"),
                   "PositWidth-3-ExpWidth"))

    items.append (("ScaleWidth",
                   math.ceil (math.log2 (((sel (items, "MaxExpValue") * sel (items, "PositWidthMinus1")) - 1))),
                   "log2((PositWidth-1)*(2^ExpWidth)-1)"))

    items.append (("FracWidthMinus1",
                   sel (items, "FracWidth") - 1,
                   "FracWidth - 1"))

    items.append (("ScaleWidthPlus1",
                   sel (items, "ScaleWidth") + 1,
                   "ScaleWidth + 1"))

    items.append (("BitsPerPositWidth",
                   math.ceil (math.log2 (sel (items, "PositWidth"))),
                   "log2 (PositWidth)"))
	
    items.append (("BitsPerExpWidth",
                   math.ceil (math.log2 (max((sel (items, "ExpWidth")),1))),
                   "log2 (ExpWidth)"))

    items.append (("ScaleWidthMinusExpWidth",
                   sel (items, "ScaleWidth") - sel (items, "ExpWidth"),
                   "ScaleWidth - ExpWidth"))

    items.append (("ScaleWidthMinusExpWidthPlus1",
                   sel (items, "ScaleWidthMinusExpWidth") + 1,
                   "ScaleWidth - ExpWidth"))

    items.append (("Iteration",
                   math.ceil (math.log2 (sel (items, "PositWidthMinus1"))),
                   "log2 (PositWidth-1)"))

    items.append (("RegimeWidth",
                   sel (items, "BitsPerPositWidth") + 1,
                   "log2 (PositWidth) + 1"))

    items.append (("FloatFracWidthMinusFracWidth",
                   sel (items, "FloatFracWidth") - sel (items, "FracWidth"),
                   "(FloatFracWidth-FracWidth)"))

    items.append (("FloatFracWidthMinus1",
                   sel (items, "FloatFracWidth") - 1,
                   "(FloatFracWidth-1)"))

    items.append (("FracWidthMinusFloatFracWidth",
                   sel (items, "FracWidth") - sel (items, "FloatFracWidth"),
                   "(FracWidth-FloatFracWidth)"))

    items.append (("LogFracWidthPlus1",
                   math.ceil (math.log2 (sel (items, "FracWidth"))) + 1,
                   "log2 (FracWidth) + 1"))

    items.append (("LogFloatFracWidthPlus1",
                   math.ceil (math.log2 (sel (items, "FloatFracWidth"))) + 1,
                   "log2 (FloatFracWidth) + 1"))

    items.append (("FracWidthMul4",
    				sel (items, "FracWidth") * 4,
                   "FracWidth * 4"))

    items.append (("FracWidthMul4Plus1",
    				sel (items, "FracWidthMul4") + 1,
                   "FracWidthMul4 + 1"))

    items.append (("LogFracWidthMul4",
                   math.ceil (math.log2 (sel (items, "FracWidthMul4"))),
                   "log2 (FracWidthMul4)"))

    items.append (("LogFracWidthMul4Plus1",
                   sel (items, "LogFracWidthMul4") + 1,
                   "LogFracWidthMul4 + 1"))


    return items
# ================================================================
# Generate the output (BSV source file)

def generate_BSV_file (BSV_package_name, items):
    filename = BSV_package_name + ".bsv"
    fout = open (filename, "w")

    fout.write ("// Copyright (c) HPC Lab, Department of Electrical Engineering, IIT Bombay\n" +
                "//\n" +
                "// Permission is hereby granted, free of charge, to any person obtaining a copy\n" +
                "// of this software and associated documentation files (the \"Software\"), to deal\n" +
                "// in the Software without restriction, including without limitation the rights\n" +
                "// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n" +
                "// copies of the Software, and to permit persons to whom the Software is\n" +
                "// furnished to do so, subject to the following conditions:\n" +
                "\n" +
                "// The above copyright notice and this permission notice shall be included in\n" +
                "// all copies or substantial portions of the Software.\n" +
		"\n" +
                "//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n" +
                "// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n" +
                "// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n" +
                "// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n" +
                "// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n" +
                "// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n" +
                "// THE SOFTWARE." +
                "\n" +
                "package " + BSV_package_name + ";\n")
    fout.write ("\n" +
                "// ================================================================\n" +
                "// Basic sizes, from which everything else is derived\n" +
                "\n")

    fout.write ("// PositWidth        = {0:2d}    (= 0x{1:02x})    (bits in posit number)\n".format (
                sel (items, "PositWidth"), sel (items, "PositWidth")))
    fout.write ("// ExpWidth          = {0:2d}    (= 0x{1:02x})    (width of exponent field)\n".format (
                sel (items, "ExpWidth"), sel (items, "ExpWidth")))
    fout.write ("// FloatWidth          = {0:2d}    (= 0x{1:02x})    (bits of Floating point number)\n".format (
                sel (items, "FloatWidth"), sel (items, "FloatWidth")))
   

    fout.write ("\n" +
                "// ================================================================\n" +
                "// Type decls\n")

    gen_decls (fout, True, items)

    fout.write ("\n" +
                "/*// ================================================================\n" +
                "// Utility functions\n")

    fout.write ("\n" +
                "function  Bit#(1)  fnSign (Bit #(n)  posit);\n" +
                "   return  posit [(valueOf (n) - 1)];\n" +
                "endfunction\n")

    fout.write ("\n" +
                "function  Bit#(n)  fnUnsignedPosit (Bit #(n)  posit);\n" +
                "   return  extend (posit [(valueOf (n) - 1):0]);\n" +
                "endfunction\n" +
                "// ================================================================*/\n")

    fout.write ("//function defines shift in fraction depending on number of fraction bit change from float to posit\n" +
                "function Tuple3#(Bit#(FracWidth), Bit#(1), Bit#(1)) fv_calculate_frac_fp(Bit#(FloatFracWidth) frac);\n"
	            "begin \n")
    if sel2(items, "FloatFracWidth") >= sel2(items, "FracWidth"):
    	fout.write ("	let a_frac_truncate = valueOf(FloatFracWidthMinusFracWidth);\n" +
	                "	Bit#(1) truncated_frac_msb = a_frac_truncate > 0 ? frac[a_frac_truncate-1]:1'b0;\n" +
	                "	Bit#(TSub#(FloatFracWidthMinusFracWidth,1)) frac_truncate_zero = truncate(frac);\n" +
	                "	Bit#(1) truncated_frac_zero = a_frac_truncate > 1 ? pack(frac_truncate_zero ==  0):1'b1;\n" +
	                "	return tuple3(frac[valueOf(FloatFracWidthMinus1):a_frac_truncate],truncated_frac_msb,truncated_frac_zero);\n")
    else:
    	fout.write ("	Bit#(FracWidth) frac_extend={frac,'0}; \n" +
    				"	return tuple3(frac_extend,1'b0,1'b1); \n")
    fout.write ("end \n" +
				"endfunction\n")

    fout.write ("//function defines shift in fraction depending on number of fraction bit change from posit to float\n " +
                "function Tuple3#(Bit#(FloatFracWidth), Bit#(1), Bit#(1)) fv_calculate_frac_pf(Bit#(FracWidth) frac);\n"
	            "begin \n")
    if sel2(items, "FloatFracWidth") <= sel2(items, "FracWidth"):
    	fout.write ("	let a_frac_truncate = valueOf(FracWidthMinusFloatFracWidth);\n" +
	                "	Bit#(1) truncated_frac_msb = a_frac_truncate > 0 ? frac[a_frac_truncate-1]:1'b0;\n" +
	                "	Bit#(TSub#(FracWidthMinusFloatFracWidth,1)) frac_truncate_zero = truncate(frac);\n" +
	                "	Bit#(1) truncated_frac_zero = a_frac_truncate > 1 ? pack(frac_truncate_zero ==  0):1'b1;\n" +
	                "	return tuple3(frac[valueOf(FracWidthMinus1):a_frac_truncate],truncated_frac_msb,truncated_frac_zero);\n")
    else:
    	fout.write ("	Bit#(FracWidth) frac_extend= frac[valueOf(FracWidthMinus1):0]; \n" +
    				"	return tuple3({frac_extend,'0},1'b0,1'b1); \n")
    fout.write ("end \n" +
				"endfunction\n")

    

    fout.write ("\n" +
                "//This function checks if the scale value has exceeded the limits max and min set due to the restricted availability of regime bits \n" +
                "// fraction bits will be shifted to take care of the scale value change due to it being bounded \n" +
                "//output : bounded scale value and the shift in frac bits \n" +
		"//the shift in frac bits is to be bounded becoz of the change in bit sizes \n" +
                "function Tuple2#(Int#(ScaleWidthPlus1), Int#(LogFracWidthPlus1)) fv_calculate_scale_shift_fp(Int#(FloatExpWidth) scale);\n" +
                "	Int#(ScaleWidthPlus1) maxB,minB,scale1; \n" +
                "	Int#(FloatExpWidth) frac_change; \n" +
                "	Int#(LogFracWidthPlus1) frac_change_bounded; \n" +
                "	//max scale value is defined here... have to saturate the scale value \n" +
                "	// max value = (N-2)*(2^es)  \n" +
                "	// scale = regime*(2^es) + expo.... max value of regime = N-2(00...1) \n" +
                "	maxB = fromInteger((valueOf(PositWidth) -2)*(2**(valueOf(ExpWidth)))); \n" +
                "	//similarly calculate the min \n" +
                "	minB = -maxB; \n" +
                "	//frac_change gives the number of bits that are more or less than scale bounds so that we can shift the frac bits to not lose scale information \n" +
                "	Int#(LogFracWidthPlus1) max_frac = unpack({1'b0,'1}); \n" +
                "	Int#(LogFracWidthPlus1) min_frac = unpack({1'b1,extend(1'b1)}); \n")
    if sel2(items, "FloatExpWidth") >= sel2(items, "LogFracWidthPlus1"):
        fout.write ("\n" +
        		    "	Int#(FloatExpWidth) max_frac_extend = signExtend(max_frac); \n" +
                	"	Int#(FloatExpWidth) min_frac_extend = signExtend(min_frac); \n");
    else:
    	fout.write ("\n" +
        		    "	Int#(FloatExpWidth) max_frac_extend = truncate(max_frac); \n" +
                	"	Int#(FloatExpWidth) min_frac_extend = truncate(min_frac); \n");
    if sel2(items, "FloatExpWidth") >= sel2(items, "ScaleWidthPlus1"):
    	fout.write ("\n" +
	                "	if (scale<extend(minB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(scale - extend(minB));// find the change in scale to bind it \n")
    else:
    	fout.write ("\n" +
	                "	if (extend(scale)<(minB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(extend(scale) - (minB));// find the change in scale to bind it \n")
    fout.write ("		scale1 = minB;//bound scale \n")
    if sel2(items, "LogFracWidthPlus1") >= sel2(items, "FloatExpWidth"):
    	fout.write ("		frac_change_bounded = extend(max(frac_change,min_frac_extend));\n")
    else:
    	fout.write ("		frac_change_bounded = truncate(max(frac_change,min_frac_extend));\n")

    fout.write ("end \n")
    if sel2(items, "FloatExpWidth") >= sel2(items, "ScaleWidthPlus1"):
    	fout.write ("	else if (scale>extend(maxB)) \n" + 
					"	begin \n" +
	                "		frac_change = truncate(scale - extend(maxB));// find the change in scale to bind it \n")
    else:
    	fout.write ("	else if (extend(scale)>(maxB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(extend(scale) - (maxB));// find the change in scale to bind it \n")
    fout.write ("		scale1 = maxB;//bound scale \n")
    if sel2(items, "LogFracWidthPlus1") >= sel2(items, "FloatExpWidth"):
    	fout.write ("		frac_change_bounded = extend(min(frac_change,max_frac_extend));\n")
    else:
    	fout.write ("		frac_change_bounded = truncate(min(frac_change,max_frac_extend));\n")

    fout.write ("end \n" +
                "	else \n" +
                "	begin \n" +
                "		frac_change_bounded = fromInteger(0); \n")
    if sel2(items, "FloatExpWidth") >= sel2(items, "ScaleWidthPlus1"):
        fout.write ("		scale1 = truncate(scale);//no change \n")
    else:
    	fout.write ("		scale1 = extend(scale);//no change \n")
    fout.write ("	end \n" +
                "	return tuple2(scale1,frac_change_bounded); \n" +
                "endfunction \n" )



    fout.write ("\n" +
                "//This function checks if the scale value has exceeded the limits max and min set due to the restricted availability of regime bits \n" +
                "// fraction bits will be shifted to take care of the scale value change due to it being bounded \n" +
                "//output : bounded scale value and the shift in frac bits \n" +
		"//the shift in frac bits is to be bounded becoz of the change in bit sizes \n" +
                "function Tuple2#(Int#(FloatExpWidth), Int#(LogFloatFracWidthPlus1)) fv_calculate_scale_shift_pf(Int#(ScaleWidthPlus1) scale);\n" +
                "	Int#(FloatExpWidth) maxB,minB,scale1; \n" +
                "	Int#(ScaleWidthPlus1) frac_change; \n" +
                "	Int#(LogFloatFracWidthPlus1) frac_change_bounded; \n" +
                "	//max scale value is defined here... have to saturate the scale value \n" +
                "	// max value = (N-2)*(2^es)  \n" +
                "	// scale = regime*(2^es) + expo.... max value of regime = N-2(00...1) \n" +
                "	maxB = fromInteger(valueOf(FloatBias)); \n" +
                "	//similarly calculate the min \n" +
                "	minB = -fromInteger(valueOf(FloatBias)); \n" +
                "	//frac_change gives the number of bits that are more or less than scale bounds so that we can shift the frac bits to not lose scale information \n" +
                "	Int#(LogFloatFracWidthPlus1) max_frac = unpack({1'b0,'1}); \n" +
                "	Int#(LogFloatFracWidthPlus1) min_frac = unpack({1'b1,extend(1'b1)}); \n")
    if sel2(items, "ScaleWidthPlus1") >= sel2(items, "LogFloatFracWidthPlus1"):
        fout.write ("\n" +
        		    "	Int#(ScaleWidthPlus1) max_frac_extend = signExtend(max_frac); \n" +
                	"	Int#(ScaleWidthPlus1) min_frac_extend = signExtend(min_frac); \n");
    else:
    	fout.write ("\n" +
        		    "	Int#(ScaleWidthPlus1) max_frac_extend = truncate(max_frac); \n" +
                	"	Int#(ScaleWidthPlus1) min_frac_extend = truncate(min_frac); \n");
    if sel2(items, "FloatExpWidth") < sel2(items, "ScaleWidthPlus1"):
    	fout.write ("\n" +
	                "	if (scale<extend(minB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(scale - extend(minB));// find the change in scale to bind it \n")
    else:
    	fout.write ("\n" +
	                "	if (extend(scale)<(minB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(extend(scale) - (minB));// find the change in scale to bind it \n")
    fout.write ("		scale1 = minB;//bound scale \n")
    if sel2(items, "LogFloatFracWidthPlus1") >= sel2(items, "ScaleWidthPlus1"):
    	fout.write ("		frac_change_bounded = extend(max(frac_change,min_frac_extend));\n")
    else:
    	fout.write ("		frac_change_bounded = truncate(max(frac_change,min_frac_extend));\n")

    fout.write ("	end \n")
    if sel2(items, "FloatExpWidth") < sel2(items, "ScaleWidthPlus1"):
    	fout.write ("	else if (scale>extend(maxB)) \n" + 
					"	begin \n" +
	                "		frac_change = truncate(scale - extend(maxB));// find the change in scale to bind it \n")
    else:
    	fout.write ("	else if (extend(scale)>(maxB)) \n" +
	                "	begin \n" +
	                "		frac_change = truncate(extend(scale) - (maxB));// find the change in scale to bind it \n")
    fout.write ("		scale1 = maxB;//bound scale \n")
    if sel2(items, "LogFloatFracWidthPlus1") >= sel2(items, "ScaleWidthPlus1"):
    	fout.write ("		frac_change_bounded = extend(min(frac_change,max_frac_extend));\n")
    else:
    	fout.write ("		frac_change_bounded = truncate(min(frac_change,max_frac_extend));\n")

    fout.write ("	end \n" +
                "	else \n" +
                "	begin \n" +
                "		frac_change_bounded = fromInteger(0); \n")
    if sel2(items, "FloatExpWidth") < sel2(items, "ScaleWidthPlus1"):
        fout.write ("		scale1 = truncate(scale);//no change \n")
    else:
    	fout.write ("		scale1 = extend(scale);//no change \n")
    fout.write ("	end \n" +
                "	return tuple2(scale1,frac_change_bounded); \n" +
                "endfunction \n" )

    fout.write ("function Bit#(ScaleWidthPlus1) fv_frac_shit_adder_mac(Bit#(FracWidthMul4Plus1) frac_sum); \n" +
				"	Bit#(LogFracWidthMul4Plus1) frac_shift_1; \n" +
				"	Bit#(ScaleWidthPlus1) zero_one = '1; \n" +
				"	Bit#(ScaleWidthPlus1) frac_shift; \n")
    if sel2(items, "ScaleWidthPlus1") < sel2(items, "LogFracWidthMul4Plus1"):
    	fout.write ("	frac_shift_1 = min(extend(zero_one),extend(pack(countZerosMSB(frac_sum)))); \n" +
    				"	frac_shift =  truncate(frac_shift_1);\n")
    else:
    	fout.write ("	frac_shift_1 = min(truncate(zero_one),extend(pack(countZerosMSB(frac_sum)))); \n" +
    				"	frac_shift =  extend(frac_shift_1);\n")
    fout.write ("	return frac_shift; \n" +
    			"endfunction \n" )



    fout.write ("\n" +
                "// ================================================================\n"
				"\n" +
                "endpackage: " + BSV_package_name + "\n")

    print ("Wrote file: ", filename)

# ================================================================
# Generate declarations, either for type size or for value

def gen_decls (fout, size_not_val, items):
    fout.write ("\n" +
                "// Posit Fields ---------------\n" +
                "\n")
    gen_decl (fout, size_not_val, "PositWidth", sel2 (items, "PositWidth"))
    gen_decl (fout, size_not_val, "ExpWidth", sel2 (items, "ExpWidth"))
    gen_decl (fout, size_not_val, "FloatWidth", sel2 (items, "FloatWidth"))
    gen_decl (fout, size_not_val, "FloatExpWidth", sel2 (items, "FloatExpWidth"))
    gen_decl (fout, size_not_val, "FloatFracWidth", sel2 (items, "FloatFracWidth"))
    gen_decl (fout, size_not_val, "FloatBias",  sel2 (items, "FloatBias"))
    gen_decl (fout, size_not_val, "PositWidthMinus1", sel2 (items, "PositWidthMinus1"))
    gen_decl (fout, size_not_val, "PositWidthMinus3", sel2 (items, "PositWidthMinus3"))
    gen_decl (fout, size_not_val, "BitsPerPositWidth", sel2 (items, "BitsPerPositWidth"))
    gen_decl (fout, size_not_val, "Iteration", sel2 (items, "Iteration"))
    gen_decl (fout, size_not_val, "RegimeWidth", sel2 (items, "RegimeWidth"))
    fout.write ("\n")
    gen_decl (fout, size_not_val, "MaxExpValue",   sel2 (items, "MaxExpValue"))
    gen_decl (fout, size_not_val, "BitsPerExpWidth", sel2 (items, "BitsPerExpWidth"))
    fout.write ("\n")
    gen_decl (fout, size_not_val, "FracWidth",  sel2 (items, "FracWidth"))
    fout.write ("\n")
    gen_decl (fout, size_not_val, "ScaleWidth",    sel2 (items, "ScaleWidth"))
    gen_decl (fout, size_not_val, "ScaleWidthPlus1",  sel2 (items, "ScaleWidthPlus1"))
    gen_decl (fout, size_not_val, "FracWidthMinus1",  sel2 (items, "FracWidthMinus1"))
    gen_decl (fout, size_not_val, "ScaleWidthMinusExpWidth",  sel2 (items, "ScaleWidthMinusExpWidth"))
    gen_decl (fout, size_not_val, "ScaleWidthMinusExpWidthPlus1",  sel2 (items, "ScaleWidthMinusExpWidthPlus1"))
    gen_decl (fout, size_not_val, "FloatFracWidthMinus1",  sel2 (items, "FloatFracWidthMinus1"))
    if sel2(items, "FloatFracWidth") >= sel2(items, "FracWidth"):
    	gen_decl (fout, size_not_val, "FloatFracWidthMinusFracWidth",  sel2 (items, "FloatFracWidthMinusFracWidth"))
    else:
    	gen_decl (fout, size_not_val, "FracWidthMinusFloatFracWidth",  sel2 (items, "FracWidthMinusFloatFracWidth"))

    gen_decl (fout, size_not_val, "LogFracWidthPlus1",  sel2 (items, "LogFracWidthPlus1"))
    gen_decl (fout, size_not_val, "LogFloatFracWidthPlus1",  sel2 (items, "LogFloatFracWidthPlus1"))
    gen_decl (fout, size_not_val, "FracWidthMul4",  sel2 (items, "FracWidthMul4"))
    gen_decl (fout, size_not_val, "FracWidthMul4Plus1",  sel2 (items, "FracWidthMul4Plus1"))
    gen_decl (fout, size_not_val, "LogFracWidthMul4",  sel2 (items, "LogFracWidthMul4"))
    gen_decl (fout, size_not_val, "LogFracWidthMul4Plus1",  sel2 (items, "LogFracWidthMul4Plus1")) 
    fout.write ("\n")

    return 0

# ================================================================
# Generate a single declaration

def gen_decl (fout, size_not_val, ide, val_and_formula):
    (val, formula) = val_and_formula
    if size_not_val:
        ide = str.upper (ide [0:1]) + ide [1:]
        fout.write ("typedef  {0:8d}   {1:30s};    // {2}\n".format (val, ide, formula))
    else:
        ide = str.lower (ide)
        fout.write ("Integer  {0:>28s} = {1:8d};    // {2}\n".format (ide, val, formula))

# ================================================================
# For non-interactive invocations, call main() and use its return value
# as the exit code.
if __name__ == '__main__':
  sys.exit (main (sys.argv))