/*
 * Generated by Bluespec Compiler (build cd96b228)
 * 
 * On Tue Jun 15 18:31:46 IST 2021
 * 
 */

/* Generation options: */
#ifndef __mkSched_h__
#define __mkSched_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkPositCore.h"
#include "mkQuire_Adder.h"


/* Class declaration for the mkSched module */
class MOD_mkSched : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_addr_A;
  MOD_Reg<tUInt32> INST_addr_B;
  MOD_Reg<tUInt32> INST_col_count;
  MOD_Reg<tUInt32> INST_col_len_A;
  MOD_Reg<tUInt32> INST_col_len_A_dummy;
  MOD_Reg<tUInt32> INST_count;
  MOD_Reg<tUInt32> INST_count_row_B;
  MOD_Fifo<tUWide> INST_ffO_Instr;
  MOD_Fifo<tUInt32> INST_fifo_posit;
  MOD_Reg<tUInt32> INST_lines;
  MOD_mkPositCore INST_melodica_0;
  MOD_mkPositCore INST_melodica_1;
  MOD_Wire<tUInt8> INST_pointerFSM_abort;
  MOD_Reg<tUInt8> INST_pointerFSM_start_reg;
  MOD_Reg<tUInt8> INST_pointerFSM_start_reg_1;
  MOD_Wire<tUInt8> INST_pointerFSM_start_reg_2;
  MOD_Wire<tUInt8> INST_pointerFSM_start_wire;
  MOD_Reg<tUInt8> INST_pointerFSM_state_can_overlap;
  MOD_Reg<tUInt8> INST_pointerFSM_state_fired;
  MOD_Wire<tUInt8> INST_pointerFSM_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_pointerFSM_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_pointerFSM_state_overlap_pw;
  MOD_Wire<tUInt8> INST_pointerFSM_state_set_pw;
  MOD_Reg<tUInt32> INST_pointer_A;
  MOD_Reg<tUInt32> INST_pointer_B;
  MOD_Reg<tUInt32> INST_pointer_lines;
  MOD_mkQuire_Adder INST_q_adder;
  MOD_Reg<tUInt8> INST_reg_status;
  MOD_Reg<tUInt32> INST_row_len_B;
  MOD_Reg<tUInt32> INST_row_len_B_dummy;
  MOD_Fifo<tUInt64> INST_stage_A_s_fifof;
  MOD_Reg<tUInt8> INST_stage_A_s_serverPipe_pipeBtoC_index_k;
  MOD_Fifo<tUInt64> INST_stage_B_s_fifof;
  MOD_Reg<tUInt8> INST_stage_B_s_serverPipe_pipeBtoC_index_k;
  MOD_BRAM<tUInt32,tUInt64,tUInt8> INST_tcm_A;
  MOD_BRAM<tUInt32,tUInt64,tUInt8> INST_tcm_B;
 
 /* Constructor */
 public:
  MOD_mkSched(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_server_sched_request_put;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_fetch;
  tUInt8 DEF_WILL_FIRE_RL_init;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l246c81;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l240c81;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l231c65;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l221c57;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l202c73;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l196c73;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l190c57;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l174c73;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l168c73;
  tUInt8 DEF_WILL_FIRE_RL_pointerFSM_action_l160c57;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160___d35;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_4_6_OR_ETC___d342;
  tUWide DEF_ffO_Instr_first____d34;
  tUInt32 DEF__read__h283;
  tUInt32 DEF_y__h110456;
  tUInt32 DEF__read__h235;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_3___d370;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_2___d86;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_4___d36;
  tUInt8 DEF_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_6___d123;
  tUInt8 DEF_NOT_ffO_Instr_first__4_BITS_162_TO_160_5_EQ_2_6___d172;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h110400;
  tUInt64 DEF_v__h106175;
  tUInt64 DEF_v__h105908;
  tUInt64 DEF_v__h104928;
  tUInt64 DEF_v__h102116;
  tUInt64 DEF_v__h97584;
  tUWide DEF_melodica_1_server_core_response_get___d383;
  tUWide DEF_melodica_0_server_core_response_get___d385;
  tUInt64 DEF_x__h102716;
  tUInt64 DEF_x__h102696;
  tUInt32 DEF_x__h110475;
  tUInt32 DEF_x__h110477;
  tUInt32 DEF_x__h101448;
  tUInt32 DEF_y__h101430;
  tUInt32 DEF_x__h101427;
  tUInt32 DEF_x__h102806;
  tUInt32 DEF_x__h102770;
  tUWide DEF_melodica_1_server_core_response_get_83_BITS_13_ETC___d384;
  tUWide DEF_melodica_0_server_core_response_get_85_BITS_13_ETC___d386;
  tUInt32 DEF_x__h98022;
  tUInt32 DEF_x__h97215;
  tUInt32 DEF_x__h102736;
  tUInt32 DEF_x__h102787;
  tUWide DEF_DONTCARE_CONCAT_DONTCARE_CONCAT_8___d375;
  tUWide DEF_DONTCARE_CONCAT_DONTCARE_CONCAT_DONTCARE_CONCA_ETC___d281;
  tUWide DEF__2_CONCAT_DONTCARE_CONCAT_SEL_ARR_stage_A_s_fif_ETC___d330;
  tUWide DEF_DONTCARE_CONCAT_SEL_ARR_stage_A_s_fifof_first__ETC___d323;
  tUWide DEF__2_CONCAT_DONTCARE_CONCAT_SEL_ARR_stage_B_s_fif_ETC___d329;
  tUWide DEF__2_CONCAT_DONTCARE_CONCAT_SEL_ARR_stage_A_s_fif_ETC___d341;
  tUWide DEF_DONTCARE_CONCAT_SEL_ARR_stage_A_s_fifof_first__ETC___d335;
  tUWide DEF__2_CONCAT_DONTCARE_CONCAT_SEL_ARR_stage_B_s_fif_ETC___d340;
  tUWide DEF_melodica_1_server_core_response_get_83_BITS_13_ETC___d387;
 
 /* Rules */
 public:
  void RL_pointerFSM_start_reg__dreg_update();
  void RL_pointerFSM_state_handle_abort();
  void RL_pointerFSM_state_fired__dreg_update();
  void RL_pointerFSM_state_every();
  void RL_pointerFSM_restart();
  void RL_pointerFSM_action_l160c57();
  void RL_pointerFSM_action_l168c73();
  void RL_pointerFSM_action_l174c73();
  void RL_pointerFSM_action_l190c57();
  void RL_pointerFSM_action_l196c73();
  void RL_pointerFSM_action_l202c73();
  void RL_pointerFSM_action_l221c57();
  void RL_pointerFSM_action_l231c65();
  void RL_pointerFSM_action_l240c81();
  void RL_pointerFSM_action_l246c81();
  void RL_pointerFSM_idle_l153c25();
  void RL_pointerFSM_idle_l153c25_1();
  void RL_pointerFSM_idle_l153c25_2();
  void RL_pointerFSM_idle_l153c25_3();
  void RL_pointerFSM_idle_l153c25_4();
  void RL_pointerFSM_idle_l153c25_5();
  void RL_pointerFSM_idle_l153c25_6();
  void RL_pointerFSM_idle_l153c25_7();
  void RL_pointerFSM_fsm_start();
  void RL_rl_reset();
  void RL_init();
  void RL_fetch();
  void RL_dispatch();
  void RL_re_dispatch();
  void RL_read_quire();
  void RL_add_quire();
  void RL_rl_out();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_25();
 
 /* Methods */
 public:
  void METH_server_sched_request_put(tUWide ARG_server_sched_request_put);
  tUInt8 METH_RDY_server_sched_request_put();
  tUInt32 METH_server_sched_response_get();
  tUInt8 METH_RDY_server_sched_response_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSched &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkSched &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkSched &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkSched &backing);
};

#endif /* ifndef __mkSched_h__ */
