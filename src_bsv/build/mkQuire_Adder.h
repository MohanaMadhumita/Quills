/*
 * Generated by Bluespec Compiler (build cd96b228)
 * 
 * On Tue Jun 15 18:31:46 IST 2021
 * 
 */

/* Generation options: */
#ifndef __mkQuire_Adder_h__
#define __mkQuire_Adder_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkNormalizer.h"
#include "mkQuire.h"


/* Class declaration for the mkQuire_Adder module */
class MOD_mkQuire_Adder : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUWide> INST_fifo_input_quire;
  MOD_Reg<tUInt8> INST_i;
  MOD_mkNormalizer INST_normalizer;
  MOD_mkQuire INST_quire_accumulator;
  MOD_CReg<tUWide> INST_quire_stage_s_fifof_rv;
  MOD_Reg<tUInt8> INST_quire_stage_s_serverPipe_index_k;
  MOD_Reg<tUInt8> INST_rg_adder_busy;
  MOD_Reg<tUInt32> INST_rg_final_posit;
  MOD_Reg<tUInt8> INST_rg_state;
 
 /* Constructor */
 public:
  MOD_mkQuire_Adder(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_add_put;
  tUWide PORT_write_quire;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_NOT_rg_adder_busy___d50;
  tUWide DEF_quire_stage_s_fifof_rv_port1__read____d51;
  tUWide DEF_quire_stage_s_fifof_rv_port0__read____d1;
  tUInt8 DEF_rg_adder_busy__h647;
 
 /* Local definitions */
 private:
  tUWide DEF_quire_stage_s_fifof_rv_port0__read_BITS_262_TO_ETC___d23;
  tUWide DEF_quire_stage_s_fifof_rv_port0__read_BITS_129_TO_2___d22;
  tUWide DEF_SEL_ARR_quire_stage_s_fifof_rv_port0__read_BIT_ETC___d25;
  tUWide DEF__1_CONCAT_add_put___d49;
  tUWide DEF__0_CONCAT_DONTCARE___d13;
  tUWide DEF_SEL_ARR_quire_stage_s_fifof_rv_port0__read_BIT_ETC___d35;
  tUWide DEF_SEL_ARR_quire_stage_s_fifof_rv_port0__read_BIT_ETC___d34;
 
 /* Rules */
 public:
  void RL_add_quire();
  void RL_read_posit();
  void RL_get_posit();
 
 /* Methods */
 public:
  void METH_add_put(tUWide ARG_add_put);
  tUInt8 METH_RDY_add_put();
  void METH_read_req_adder();
  tUInt8 METH_RDY_read_req_adder();
  tUInt32 METH_read_posit_adder_get();
  tUInt8 METH_RDY_read_posit_adder_get();
  tUWide METH_write_quire();
  tUInt8 METH_RDY_write_quire();
  void METH_clear();
  tUInt8 METH_RDY_clear();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkQuire_Adder &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkQuire_Adder &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkQuire_Adder &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkQuire_Adder &backing);
};

#endif /* ifndef __mkQuire_Adder_h__ */
