/*
 * Generated by Bluespec Compiler (build cd96b228)
 * 
 * On Tue Jun 15 18:31:46 IST 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkPtoF_PNE.h"


/* String declarations */
static std::string const __str_literal_7("   Adjusted: frac %b scale %b frac_change %b", 44u);
static std::string const __str_literal_6("   Inputs: sign %b scale %b frac %b", 35u);
static std::string const __str_literal_3("   float_no %b add_round %b ", 28u);
static std::string const __str_literal_2("   scale_f %b scale_plus_bias %b frac_f %b", 42u);
static std::string const __str_literal_4("   truncated_frac_zero %b truncated_frac_msb %b lsbfrac_f %b",
					 60u);
static std::string const __str_literal_1("%0d: %m: request.fa_extract_float: ", 35u);
static std::string const __str_literal_5("%0d: %m: request: ", 18u);


/* Constructor */
MOD_mkPtoF_PNE::MOD_mkPtoF_PNE(tSimStateHdl simHdl,
			       char const *name,
			       Module *parent,
			       tUInt8 ARG_verbosity)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ffO(simHdl, "ffO", this, 35u, 2u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u),
    PORT_verbosity(ARG_verbosity),
    DEF_v__h912(2863311530u),
    DEF_v__h213(2863311530u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPtoF_PNE::init_symbols_0()
{
  init_symbol(&symbols[0u], "ffO", SYM_MODULE, &INST_ffO);
  init_symbol(&symbols[1u], "verbosity", SYM_PORT, &PORT_verbosity, 2u);
}


/* Rule actions */


/* Methods */

void MOD_mkPtoF_PNE::METH_request_put(tUInt32 ARG_request_put)
{
  tUInt64 DEF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN_0_E_ETC___d66;
  tUInt32 DEF_float_no__h167;
  tUInt8 DEF_add_round__h168;
  tUInt8 DEF_x__h601;
  tUInt32 DEF_v__h906;
  tUInt32 DEF_v__h207;
  tUInt8 DEF_x__h602;
  tUInt8 DEF_NOT_verbosity_ULE_1___d2;
  tUInt8 DEF_truncated_frac_msb__h162;
  tUInt8 DEF_truncated_frac_zero__h161;
  tUInt8 DEF_IF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN__ETC___d64;
  tUInt8 DEF_SEXT_request_put_BITS_17_TO_12_SLT_129___d7;
  tUInt8 DEF_SEXT_request_put_BITS_17_TO_12____d6;
  tUInt8 DEF_SEXT_request_put_BITS_17_TO_12_SLE_127___d8;
  tUInt32 DEF_frac__h144;
  tUInt8 DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d36;
  tUInt32 DEF_float_no__h170;
  tUInt32 DEF_frac__h160;
  tUInt8 DEF_p_sign__h313;
  tUInt8 DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25;
  tUInt32 DEF_frac_f__h166;
  tUInt8 DEF_y__h603;
  tUInt8 DEF_request_put_BITS_20_TO_19___d39;
  tUInt8 DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d30;
  tUInt8 DEF_x__h531;
  tUInt8 DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d51;
  tUInt8 DEF_SEXT_request_put_BITS_17_TO_12_MINUS_127_9_BIT_ETC___d20;
  tUInt8 DEF_SEXT_request_put_BITS_17_TO_12_MINUS_129_5_BIT_ETC___d16;
  tUInt32 DEF_x__h365;
  tUInt8 DEF_scale_plus_bias__h165;
  tUInt32 DEF_frac_extend__h437;
  tUInt32 DEF_x__h434;
  tUInt32 DEF_x_BITS_22_TO_0___h538;
  tUInt8 DEF_request_put_BITS_17_TO_12___d5;
  tUInt8 DEF_signed_request_put_BITS_17_TO_12___d69;
  tUInt8 DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24;
  tUInt8 DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d71;
  tUInt8 DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d10;
  tUInt8 DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d70;
  tUInt32 DEF_SEXT_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_ETC___d11;
  tUInt32 DEF_signed_SEXT_IF_SEXT_request_put_BITS_17_TO_12_ETC___d12;
  DEF_request_put_BITS_17_TO_12___d5 = (tUInt8)((tUInt8)63u & (ARG_request_put >> 12u));
  DEF_signed_request_put_BITS_17_TO_12___d69 = DEF_request_put_BITS_17_TO_12___d5;
  DEF_frac_extend__h437 = (tUInt32)(4095u & ARG_request_put);
  DEF_request_put_BITS_20_TO_19___d39 = (tUInt8)(ARG_request_put >> 19u);
  DEF_p_sign__h313 = (tUInt8)((tUInt8)1u & (ARG_request_put >> 18u));
  DEF_frac__h144 = 8388607u & (DEF_frac_extend__h437 << 11u);
  DEF_frac__h160 = 16777215u & ((((tUInt32)((tUInt8)1u)) << 23u) | DEF_frac__h144);
  DEF_SEXT_request_put_BITS_17_TO_12____d6 = primSignExt8(8u,
							  6u,
							  (tUInt8)(DEF_request_put_BITS_17_TO_12___d5));
  DEF_SEXT_request_put_BITS_17_TO_12_MINUS_129_5_BIT_ETC___d16 = (tUInt8)((tUInt8)63u & ((tUInt8)255u & (DEF_SEXT_request_put_BITS_17_TO_12____d6 - (tUInt8)129u)));
  DEF_SEXT_request_put_BITS_17_TO_12_MINUS_127_9_BIT_ETC___d20 = (tUInt8)((tUInt8)63u & ((tUInt8)255u & (DEF_SEXT_request_put_BITS_17_TO_12____d6 - (tUInt8)127u)));
  DEF_SEXT_request_put_BITS_17_TO_12_SLE_127___d8 = primSLE8(1u,
							     8u,
							     (tUInt8)(DEF_SEXT_request_put_BITS_17_TO_12____d6),
							     8u,
							     (tUInt8)127u);
  DEF_SEXT_request_put_BITS_17_TO_12_SLT_129___d7 = primSLT8(1u,
							     8u,
							     (tUInt8)(DEF_SEXT_request_put_BITS_17_TO_12____d6),
							     8u,
							     (tUInt8)129u);
  DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d10 = DEF_SEXT_request_put_BITS_17_TO_12_SLT_129___d7 ? (tUInt8)129u : (DEF_SEXT_request_put_BITS_17_TO_12_SLE_127___d8 ? DEF_SEXT_request_put_BITS_17_TO_12____d6 : (tUInt8)127u);
  DEF_SEXT_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_ETC___d11 = primSignExt32(9u,
									       8u,
									       (tUInt8)(DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d10));
  DEF_signed_SEXT_IF_SEXT_request_put_BITS_17_TO_12_ETC___d12 = DEF_SEXT_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_ETC___d11;
  DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d70 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d10;
  DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24 = DEF_SEXT_request_put_BITS_17_TO_12_SLT_129___d7 ? (primSLE8(1u,
															     6u,
															     (tUInt8)(DEF_SEXT_request_put_BITS_17_TO_12_MINUS_129_5_BIT_ETC___d16),
															     6u,
															     (tUInt8)33u) ? (tUInt8)33u : DEF_SEXT_request_put_BITS_17_TO_12_MINUS_129_5_BIT_ETC___d16) : (DEF_SEXT_request_put_BITS_17_TO_12_SLE_127___d8 ? (tUInt8)0u : (primSLE8(1u,
																																				    6u,
																																				    (tUInt8)(DEF_SEXT_request_put_BITS_17_TO_12_MINUS_127_9_BIT_ETC___d20),
																																				    6u,
																																				    (tUInt8)31u) ? DEF_SEXT_request_put_BITS_17_TO_12_MINUS_127_9_BIT_ETC___d20 : (tUInt8)31u));
  DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d71 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24;
  DEF_x__h365 = 511u & (DEF_SEXT_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_ETC___d11 + 127u);
  DEF_scale_plus_bias__h165 = (tUInt8)((tUInt8)255u & DEF_x__h365);
  DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25 = (tUInt8)(DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24 >> 5u);
  DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d30 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25 ? (tUInt8)63u & -DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24 : DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24;
  DEF_x__h531 = (tUInt8)63u & (DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d30 + (tUInt8)1u);
  DEF_x__h434 = primShiftR32(24u, 24u, (tUInt32)(DEF_frac__h160), 6u, (tUInt8)(DEF_x__h531));
  DEF_x_BITS_22_TO_0___h538 = (tUInt32)(8388607u & DEF_x__h434);
  DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d51 = (tUInt8)((tUInt8)31u & DEF_x__h531);
  DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d36 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d24 == (tUInt8)0u;
  DEF_frac_f__h166 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25 ? DEF_x_BITS_22_TO_0___h538 : (DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d36 ? DEF_frac__h144 : 8388607u);
  DEF_y__h603 = (tUInt8)((tUInt8)1u & DEF_frac_f__h166);
  DEF_truncated_frac_zero__h161 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25 ? primExtract32(32u,
													       24u,
													       (tUInt32)(DEF_frac__h160),
													       5u,
													       (tUInt8)((tUInt8)((tUInt8)31u & DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d30)),
													       5u,
													       (tUInt8)0u) == 0u : DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d36;
  DEF_truncated_frac_msb__h162 = DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d25 ? primExtract8(1u,
													     24u,
													     (tUInt32)(DEF_frac__h160),
													     5u,
													     (tUInt8)(DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d51),
													     5u,
													     (tUInt8)(DEF_IF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_T_ETC___d51)) : !DEF_IF_SEXT_request_put_BITS_17_TO_12_SLT_129_THEN_ETC___d36;
  DEF_NOT_verbosity_ULE_1___d2 = !(PORT_verbosity <= (tUInt8)1u);
  DEF_x__h602 = (tUInt8)1u & ~DEF_truncated_frac_zero__h161;
  DEF_x__h601 = DEF_x__h602 | DEF_y__h603;
  DEF_add_round__h168 = DEF_x__h601 & DEF_truncated_frac_msb__h162;
  DEF_float_no__h167 = ((((tUInt32)(DEF_p_sign__h313)) << 31u) | (((tUInt32)(DEF_scale_plus_bias__h165)) << 23u)) | DEF_frac_f__h166;
  switch (DEF_request_put_BITS_20_TO_19___d39) {
  case (tUInt8)2u:
    DEF_float_no__h170 = 0u;
    break;
  case (tUInt8)1u:
    DEF_float_no__h170 = 4286578688u;
    break;
  default:
    DEF_float_no__h170 = DEF_float_no__h167 + ((tUInt32)(DEF_add_round__h168));
  }
  switch (DEF_float_no__h170) {
  case 0u:
    DEF_IF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN__ETC___d64 = (tUInt8)2u;
    break;
  case 4286578688u:
    DEF_IF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN__ETC___d64 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN__ETC___d64 = (tUInt8)0u;
  }
  DEF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN_0_E_ETC___d66 = 34359738367llu & (((((tUInt64)(DEF_float_no__h170)) << 3u) | (((tUInt64)(DEF_request_put_BITS_20_TO_19___d39 == (tUInt8)0u ? DEF_IF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN__ETC___d64 : DEF_request_put_BITS_20_TO_19___d39)) << 1u)) | (tUInt64)(DEF_add_round__h168));
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_verbosity_ULE_1___d2)
      DEF_v__h213 = dollar_stime(sim_hdl);
    else
      DEF_v__h213 = 2863311530u;
  DEF_v__h207 = DEF_v__h213 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_v__h207);
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl,
		     this,
		     "s,-9,8,23",
		     &__str_literal_2,
		     DEF_signed_SEXT_IF_SEXT_request_put_BITS_17_TO_12_ETC___d12,
		     DEF_scale_plus_bias__h165,
		     DEF_frac_f__h166);
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl, this, "s,32,1", &__str_literal_3, DEF_float_no__h170, DEF_add_round__h168);
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl,
		     this,
		     "s,1,1,1",
		     &__str_literal_4,
		     DEF_truncated_frac_zero__h161,
		     DEF_truncated_frac_msb__h162,
		     DEF_y__h603);
  }
  INST_ffO.METH_enq(DEF_IF_request_put_BITS_20_TO_19_9_EQ_2_0_THEN_0_E_ETC___d66);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_verbosity_ULE_1___d2)
      DEF_v__h912 = dollar_stime(sim_hdl);
    else
      DEF_v__h912 = 2863311530u;
  DEF_v__h906 = DEF_v__h912 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_5, DEF_v__h906);
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl,
		     this,
		     "s,1,-6,12",
		     &__str_literal_6,
		     DEF_p_sign__h313,
		     DEF_signed_request_put_BITS_17_TO_12___d69,
		     DEF_frac_extend__h437);
    if (DEF_NOT_verbosity_ULE_1___d2)
      dollar_display(sim_hdl,
		     this,
		     "s,23,-8,-6",
		     &__str_literal_7,
		     DEF_frac__h144,
		     DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d70,
		     DEF_signed_IF_SEXT_request_put_BITS_17_TO_12_SLT__ETC___d71);
  }
}

tUInt8 MOD_mkPtoF_PNE::METH_RDY_request_put()
{
  tUInt8 DEF_CAN_FIRE_request_put;
  tUInt8 PORT_RDY_request_put;
  DEF_CAN_FIRE_request_put = INST_ffO.METH_i_notFull();
  PORT_RDY_request_put = DEF_CAN_FIRE_request_put;
  return PORT_RDY_request_put;
}

tUInt64 MOD_mkPtoF_PNE::METH_response_get()
{
  tUInt64 DEF_response_get__avValue1;
  tUInt64 PORT_response_get;
  DEF_response_get__avValue1 = INST_ffO.METH_first();
  PORT_response_get = DEF_response_get__avValue1;
  INST_ffO.METH_deq();
  return PORT_response_get;
}

tUInt8 MOD_mkPtoF_PNE::METH_RDY_response_get()
{
  tUInt8 DEF_CAN_FIRE_response_get;
  tUInt8 PORT_RDY_response_get;
  DEF_CAN_FIRE_response_get = INST_ffO.METH_i_notEmpty();
  PORT_RDY_response_get = DEF_CAN_FIRE_response_get;
  return PORT_RDY_response_get;
}


/* Reset routines */

void MOD_mkPtoF_PNE::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_ffO.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPtoF_PNE::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPtoF_PNE::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_ffO.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPtoF_PNE::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h213", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h912", 32u);
  num = INST_ffO.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPtoF_PNE::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPtoF_PNE &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPtoF_PNE::vcd_defs(tVCDDumpType dt, MOD_mkPtoF_PNE &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_v__h213) != DEF_v__h213)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h213, 32u);
	backing.DEF_v__h213 = DEF_v__h213;
      }
      ++num;
      if ((backing.DEF_v__h912) != DEF_v__h912)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h912, 32u);
	backing.DEF_v__h912 = DEF_v__h912;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_v__h213, 32u);
      backing.DEF_v__h213 = DEF_v__h213;
      vcd_write_val(sim_hdl, num++, DEF_v__h912, 32u);
      backing.DEF_v__h912 = DEF_v__h912;
    }
}

void MOD_mkPtoF_PNE::vcd_prims(tVCDDumpType dt, MOD_mkPtoF_PNE &backing)
{
  INST_ffO.dump_VCD(dt, backing.INST_ffO);
}
